{"version":3,"sources":["sortingAlgorithms/MergeSort.js","sortingAlgorithms/HeapSort.js","sortingAlgorithms/QuickSort.js","sortingAlgorithms/SelectionSort.js","sortingAlgorithms/BubbleSort.js","sortingAlgorithms/RadixSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/InsertionSort.js","sortingAlgorithms/CycleSort.js","sortingAlgorithms/ShellSort.js","sortingAlgorithms/BucketSort.js","sortingAlgorithms/CountingSort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","length","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","i","arraysAreEqual","startIndex","endIndex","middleIndex","Math","floor","sortArray","j","push","merge","maxHeapify","N","largest","left","right","swap","firstIndex","secondIndex","temp","quickSort","pivotIndex","min","max","random","lessTailIndex","partitionArray","countSort","arr","n","exp","output","Array","count","PRIMARY_COLOR","SECONDARY_COLOR","algorithms","key","insertionSort","min_index","selectionSort","iters","swapped","bubbleSort","heapSort","cycle_start","item","pos","cycleSort","gap","shellSort","m","mx","getMax","radixSort","k","max_val","buckets","bucketIndex","index","bucketSort","countingSort","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","document","getElementById","disabled","mergeSortedArray","algorithmName","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","color","barOneIndex","barOneStyle","style","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","restoreStoreButtons","barTwoIndex","barTwoStyle","className","map","value","idx","id","marginRight","onClick","bktsort","React","Component","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d87adc18.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    if(startIndex === endIndex)\r\n        return;\r\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\r\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n    let sortArray = [];\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        animations.push([\"comparision1\", i, j]);\r\n        animations.push([\"comparision2\", i, j]);\r\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\r\n            sortArray.push(auxillaryArray[i++]);\r\n        }\r\n        else {\r\n            sortArray.push(auxillaryArray[j++]);\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([\"comparision1\", i, i]);\r\n        animations.push([\"comparision2\", i, i]);\r\n        sortArray.push(auxillaryArray[i++]);\r\n    }\r\n    while(j <= endIndex) {\r\n        animations.push([\"comparision1\", j, j]);\r\n        animations.push([\"comparision2\", j, j]);\r\n        sortArray.push(auxillaryArray[j++]);\r\n    }\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        animations.push([\"comparision1\", i, i - startIndex]);\r\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\r\n        animations.push([\"comparision2\", i, i - startIndex]);\r\n        auxillaryArray[i] = sortArray[i - startIndex];\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getHeapSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    heapSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\n/*\r\nfunction buildHeap(auxillaryArray, N, animations){\r\n    for(let i = (N-2)/2; i>=0; i--){\r\n        maxHeapify(auxillaryArray, N, i, animations);\r\n    }\r\n\r\n}*/\r\n\r\nfunction heapSort(auxillaryArray, animations){\r\n    const N = auxillaryArray.length;\r\n    for(let i = (N-2)/2; i>=0; i--){\r\n        maxHeapify(auxillaryArray, N, i, animations);\r\n    }\r\n    //buildHeap(auxillaryArray, N, animations);\r\n    for(let i=N-1; i>=1; i--){\r\n        animations.push([\"swap\", i, auxillaryArray[0]]);\r\n        animations.push([\"swap\", 0, auxillaryArray[i]]);\r\n        swap(auxillaryArray, i, 0);\r\n        maxHeapify(auxillaryArray, i, 0, animations);\r\n    }\r\n}\r\n\r\nfunction maxHeapify(auxillaryArray, N, i, animations){\r\n    let largest=i;\r\n    const left=2*i+1;\r\n    const right=2*i+2;\r\n    if(left<N && auxillaryArray[left]>auxillaryArray[largest]){\r\n        animations.push([\"comparision1\", largest, left]);\r\n        animations.push([\"comparision2\", largest, left]);\r\n        largest = left;\r\n    }\r\n    if(right<N && auxillaryArray[right]>auxillaryArray[largest]){\r\n        animations.push([\"comparision1\", right, largest]);\r\n        animations.push([\"comparision2\", right, largest]);\r\n        largest = right;\r\n    }\r\n    if(largest!=i){\r\n        animations.push([\"swap\", i, auxillaryArray[largest]]);\r\n        animations.push([\"swap\", largest, auxillaryArray[i]]);\r\n        swap(auxillaryArray, i, largest);\r\n        maxHeapify(auxillaryArray, N, largest, animations);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n/*Heap sort logic\r\n\r\nvoid maxHeapify(a[], n, i){\r\n    let largest=i;\r\n    let left=2*i+1, right=2*i+2;\r\n    if(left<n && a[left]>a[largest]){\r\n        largest=left;\r\n    }\r\n    if(right<n && a[right]>a[largest]){\r\n        largest=right;\r\n    }\r\n    if(largest != i){\r\n        swap(a[largest], a[i]);\r\n        maxHeapify(a, n, largest);\r\n    }\r\n}\r\n\r\nvoid buildheap(int a[], int n){\r\n    for(let i = (n-2)/2; i>=0; i--){\r\n        maxHeapify(a, n, i);\r\n    }\r\n}\r\n\r\nvoid HeapSort(int a[], int n){\r\n    buildHeap(a, n);\r\n    for(let i=n-1; i>=1; i--){\r\n        swap(a[i], a[0]);\r\n        maxHeapify(a[], n, i);\r\n    }\r\n}\r\n\r\nHeapSort(){\r\n\r\n}\r\n\r\n*/","export function getQuickSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\r\n\r\n    animations.push([\"comparision1\", pivotIndex, endIndex]);\r\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\r\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n\r\n    let lessTailIndex = startIndex;\r\n\r\n    for (let i = startIndex; i < endIndex; ++i) {\r\n        animations.push([\"comparision1\", i, endIndex]);\r\n        animations.push([\"comparision2\", i, endIndex]);\r\n        if (auxillaryArray[i] <= auxillaryArray[endIndex]) {\r\n            animations.push([\"comparision1\", i, lessTailIndex]);\r\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\r\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\r\n            animations.push([\"comparision2\", i, lessTailIndex]);\r\n            swap(auxillaryArray, i, lessTailIndex);\r\n            lessTailIndex++;\r\n        }\r\n    }\r\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\r\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\r\n\r\n    swap(auxillaryArray, lessTailIndex, endIndex);\r\n    return lessTailIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n/*\r\nQUICK SORT LOGIC\r\n\r\nfunction quickSort(){\r\n    if(low<=high){\r\n        int p=Hpartition(a, low, high);\r\n        quickSort(a, low, p);\r\n        quickSort(a, p+1, high);\r\n\r\n    }\r\n}\r\n\r\nfunction Hpartition(a, low, high){\r\n    let pivot=a[0];//we can set random pivot\r\n    let i=low-1, j=high+1;\r\n    while(low<high){\r\n        do{\r\n            i++;\r\n        }while(a[i]<pivot);\r\n        do{\r\n            j--;\r\n        }while(a[j]>pivot);\r\n        swap(a[i], a[j]);\r\n        if(i>=j){\r\n            return j;\r\n        }\r\n    }\r\n}*/","export function getSelectionSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for(let i=0; i<N; i++){\r\n        let min_index=i;\r\n        for(let j=i+1; j<N; j++){\r\n            animations.push([\"comparision1\", j, min_index]);\r\n            animations.push([\"comparision2\", j, min_index]);\r\n            if(auxillaryArray[j]<auxillaryArray[min_index]){\r\n                min_index=j\r\n            }\r\n        }\r\n        animations.push([\"swap\", min_index, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[min_index]]);\r\n        swap(auxillaryArray, min_index, i);\r\n    }\r\n}\r\n\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","export function getBubbleSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    let iters = N - 1;\r\n    while(iters > 0) {\r\n        let swapped = false;\r\n        for(let i = 0; i < iters; ++i) {\r\n            animations.push([\"comparision1\", i, i + 1]);\r\n            animations.push([\"comparision2\", i, i + 1]);\r\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                swap(auxillaryArray, i, i + 1);\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n        iters--;\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getRadixSortAnimations(array){\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    radixSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\n\r\nfunction getMax(arr,n)\r\n{\r\n\tlet mx = arr[0];\r\n\t\tfor (let i = 1; i < n; i++)\r\n\t\t\tif (arr[i] > mx)\r\n\t\t\t\tmx = arr[i];\r\n\t\treturn mx;\r\n}\r\n\r\n\r\nfunction countSort(arr, n, exp, animations)\r\n{\r\n\tlet output = new Array(n); // output array\r\n\t\tlet i;\r\n\t\tlet count = new Array(10);\r\n\t\tfor(let i=0;i<10;i++)\r\n\t\t\tcount[i]=0;\r\n\r\n\t\t// Store count of occurrences in count[]\r\n\t\tfor (i = 0; i < n; i++){\r\n            animations.push([\"comparision1\", i]);\r\n            animations.push([\"comparision2\", i]);\r\n\t\t\t//animations.push(i);\r\n            count[Math.floor(arr[i] / exp) % 10]++;\r\n        }\r\n\t\r\n\t\tfor (i = 1; i < 10; i++)\r\n\t\t\tcount[i] += count[i - 1];\r\n\r\n\t\t// Build the output array\r\n\t\tfor (i = n - 1; i >= 0; i--) {\r\n            animations.push([\"comparision1\", i]);\r\n            animations.push([\"comparision2\", i]);\r\n            animations.push([\"overwrite\", count[Math.floor(arr[i] / exp) % 10] - 1, arr[i]]);\r\n            //animations.push(i)\r\n\t\t\toutput[count[Math.floor(arr[i] / exp) % 10] - 1] = arr[i];\r\n\t\t\tcount[Math.floor(arr[i] / exp) % 10]--;\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < n; i++)\r\n\t\t\tarr[i] = output[i];\r\n}\r\n\r\nfunction radixSort(arr, animations)\r\n{\r\n    let n=arr.length;\r\n\t\tlet m = getMax(arr, n);\r\n\r\n\t\tfor (let exp = 1; Math.floor(m / exp) > 0; exp *= 10)\r\n\t\t\tcountSort(arr, n, exp, animations);\r\n}\r\n\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","import React from 'react';\r\n\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort';\r\nimport { getHeapSortAnimations } from '../sortingAlgorithms/HeapSort';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort';\r\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/InsertionSort';\r\nimport { getShellSortAnimations } from '../sortingAlgorithms/ShellSort';\r\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/SelectionSort';\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort';\r\nimport { getCycleSortAnimations } from '../sortingAlgorithms/CycleSort';\r\nimport { getCountingSortAnimations } from '../sortingAlgorithms/CountingSort';\r\nimport { getRadixSortAnimations } from '../sortingAlgorithms/RadixSort';\r\nimport { getBucketSortAnimations } from '../sortingAlgorithms/BucketSort';\r\nimport './SortingVisualizer.css';\r\n\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\nconst PRIMARY_COLOR = 'pink';\r\n\r\nconst SECONDARY_COLOR = 'purple';\r\n\r\nconst algorithms = {\r\n  \"mergeSort\": getMergeSortAnimations,\r\n  \"insertionSort\": getInsertionSortAnimations,\r\n  \"quickSort\": getQuickSortAnimations,\r\n  \"selectionSort\": getSelectionSortAnimations,\r\n  \"bubbleSort\": getBubbleSortAnimations,\r\n  \"heapSort\": getHeapSortAnimations,\r\n  \"cycleSort\": getCycleSortAnimations,\r\n  \"shellSort\": getShellSortAnimations,\r\n  \"radixSort\": getRadixSortAnimations,\r\n  \"bucketSort\": getBucketSortAnimations,\r\n  \"countingSort\": getCountingSortAnimations\r\n}\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 650));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  disableSortButtons() {\r\n    document.getElementById(\"generateNewArray\").disabled = true;\r\n    document.getElementById(\"mergeSort\").disabled = true;\r\n    document.getElementById(\"quickSort\").disabled = true;\r\n    document.getElementById(\"heapSort\").disabled = true;\r\n    document.getElementById(\"insertionSort\").disabled = true;\r\n    document.getElementById(\"selectionSort\").disabled = true;\r\n    document.getElementById(\"bubbleSort\").disabled = true;\r\n    document.getElementById(\"shellSort\").disabled = true;\r\n    document.getElementById(\"cycleSort\").disabled = true;\r\n    document.getElementById(\"countingSort\").disabled = true;\r\n    document.getElementById(\"bucketSort\").disabled = true;\r\n    document.getElementById(\"radixSort\").disabled = true;\r\n  }\r\n\r\n  restoreStoreButtons() {\r\n    document.getElementById(\"generateNewArray\").disabled = false;\r\n    document.getElementById(\"mergeSort\").disabled = false;\r\n    document.getElementById(\"quickSort\").disabled = false;\r\n    document.getElementById(\"heapSort\").disabled = false;\r\n    document.getElementById(\"bubbleSort\").disabled = false;\r\n    document.getElementById(\"selectionSort\").disabled = false;\r\n    document.getElementById(\"cycleSort\").disabled = false;\r\n    document.getElementById(\"bucketSort\").disabled = false;\r\n    document.getElementById(\"countingSort\").disabled = false;\r\n    document.getElementById(\"radixSort\").disabled = false;\r\n    document.getElementById(\"shellSort\").disabled = false;\r\n    document.getElementById(\"insertionSort\").disabled = false;\r\n  }\r\n\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  bktsort(algorithmName) {\r\n    this.disableSortButtons();\r\n    const [animations, sortArray] = algorithms[algorithmName](this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (isColorChange === true) {\r\n        const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [comparision, barOneIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n      else {\r\n        const [swap, barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    setTimeout(() => this.restoreStoreButtons(), (animations.length - 1) * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n\r\n  sort(algorithmName) {\r\n    this.disableSortButtons();\r\n    const [animations, sortArray] = algorithms[algorithmName](this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (isColorChange === true) {\r\n        const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n      else {\r\n        const [swap, barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    setTimeout(() => this.restoreStoreButtons(), (animations.length - 1) * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>//{value} to check if algorithm is working or not \r\n        ))}\r\n\r\n\r\n        <button id=\"generateNewArray\" style={{ marginRight: '8px' }} onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button id=\"mergeSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('mergeSort')}>Merge Sort</button>\r\n        <button id=\"quickSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('quickSort')}>Quick Sort</button>\r\n        <button id=\"heapSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('heapSort')}>Heap Sort</button>\r\n        <button id=\"bubbleSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('bubbleSort')}>Bubble Sort</button>\r\n        <button id=\"insertionSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('insertionSort')}>Insertion Sort</button>\r\n        <button id=\"selectionSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('selectionSort')}>Selection Sort</button>\r\n        <button id=\"shellSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('shellSort')}>Shell Sort</button>\r\n        <button id=\"cycleSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('cycleSort')}>Cycle Sort</button>\r\n\r\n        {/*this algos below does not compare array elements hence declared different function bktsort() \r\n        also it requires extra array so need to work on it but the animation works fine*/}\r\n        \r\n        <button id=\"countingSort\" style={{ marginRight: '8px' }} onClick={() => this.bktsort('countingSort')}>Counting Sort</button>\r\n        <button id=\"radixSort\" style={{ marginRight: '8px' }} onClick={() => this.bktsort('radixSort')}>Radix Sort</button>\r\n        <button id=\"bucketSort\" style={{ marginRight: '8px' }} onClick={() => this.bktsort('bucketSort')}>Bucket Sort</button>\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","export function getInsertionSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while (j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if (j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }\r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","export function getCycleSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    cycleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\n\r\nfunction cycleSort(arr, animations) {\r\n    const n = arr.length;\r\n    let writes = 0;\r\n\r\n    for (let cycle_start = 0; cycle_start < n - 1; cycle_start++) {\r\n\r\n        let item = arr[cycle_start];\r\n        let toswap=cycle_start;\r\n        let pos = cycle_start;\r\n\r\n        for (let i = cycle_start + 1; i < n; i++)\r\n            if (arr[i] < item) {\r\n                animations.push([\"comparision1\", pos, i]);\r\n                animations.push([\"comparision2\", pos, i]);\r\n                pos++;\r\n            }\r\n\r\n        if (pos == cycle_start){\r\n            continue;\r\n        }\r\n\r\n\r\n        while (item == arr[pos]){\r\n            pos += 1;\r\n        }\r\n\r\n        if (pos != cycle_start) {\r\n            //swap a[pos] and item\r\n\r\n            animations.push([\"swap\", pos, item]);\r\n            //animations.push([\"swap\", toswap, arr[pos]]);\r\n            let temp = item;\r\n            item = arr[pos];\r\n            arr[pos] = temp;\r\n      \r\n            writes++;\r\n        }\r\n        toswap=pos;\r\n        while (pos != cycle_start) {\r\n            pos = cycle_start;\r\n\r\n            for (let i = cycle_start + 1; i < n; i++)\r\n                if (arr[i] < item) {\r\n                    animations.push([\"comparision1\", pos, i]);\r\n                    animations.push([\"comparision2\", pos, i]);\r\n                    pos += 1;\r\n                }\r\n\r\n            while (item == arr[pos]) {\r\n                toswap=pos;\r\n                pos += 1;\r\n            }\r\n\r\n            if (item != arr[pos]) {\r\n                //swap a[pos] with item\r\n                animations.push([\"swap\", pos, item]);\r\n                //animations.push([\"swap\", toswap, arr[pos]]);\r\n                let temp = item;\r\n                item = arr[pos];\r\n                arr[pos] = temp;\r\n                //animations.push([\"overwrite\", pos, item]);\r\n\r\n                //animations.push([\"swap\", toswap, arr[pos]]);\r\n                //swap(arr, pos, toswap);\r\n                writes++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","export function getShellSortAnimations(array){\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    shellSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\nfunction shellSort(auxillaryArray, animations) {\r\n\tlet n = auxillaryArray.length;\r\n\r\n\tfor (let gap = Math.floor(n/2); gap > 0; gap = Math.floor(gap/2))\t{\r\n\t\tfor (let i = gap; i < n; i += 1)  {\r\n\t\t\tlet temp = auxillaryArray[i];\r\n\t\t\t\r\n\t\t\tlet j;\r\n\t\t\tfor (j = i; j >= gap && auxillaryArray[j-gap] > temp; j-=gap)  {\r\n                \r\n                animations.push([\"comparision1\", j, j-gap]);\r\n                animations.push([\"overwrite\", j, auxillaryArray[j-gap]]);\r\n\t\t\t\tauxillaryArray[j] = auxillaryArray[j-gap];\r\n                animations.push([\"comparision2\", j, j-gap]);\r\n\t\t\t}\r\n            animations.push([\"overwrite\", j, temp]);\r\n\t\t\tauxillaryArray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getBucketSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();  //possible error\r\n    bucketSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bucketSort(arr, animations) {\r\n\r\n    console.log(arr);\r\n    let n = arr.length;\r\n    let k = n; \r\n    //here length of the bucket depends on the no. of inputs that have been considered, here the we have no. of array bars = 100 \r\n    //the index of this elements are calculated using standard formula\r\n\r\n    if (n <= 0)\r\n        return;\r\n    let max_val = arr[0];\r\n    for (let i = 1; i < n; i++) {\r\n        max_val = Math.max(max_val, arr[i]);\r\n    }\r\n    max_val += 1;\r\n\r\n    let buckets = new Array(k);\r\n    console.log(buckets.length);\r\n\r\n    for (let i = 0; i < k; i++) {\r\n        buckets[i] = [];\r\n    }\r\n\r\n    for (let i = 0; i < n; i++) {\r\n\r\n        //console.log('Iterations: ' + i);\r\n        animations.push([\"comparision1\", i]);\r\n        animations.push([\"comparision2\", i]);\r\n        let bucketIndex = Math.floor((k*arr[i])/max_val);\r\n        //console.log(buckets[bucketIndex]); //undefined\r\n        //console.log(arr[i]); // working fine\r\n        //(buckets[bucketIndex] || (buckets[bucketIndex] = [])).push(arr[i]);  //possible error may be buckets[bucketIndex] \r\n        buckets[bucketIndex].push(arr[i]);\r\n        console.log('Bucket of'+bucketIndex+' '+buckets[bucketIndex]);\r\n        console.log('Bucket of'+bucketIndex+' length '+buckets[bucketIndex].length);\r\n    }\r\n\r\n    for (let i = 0; i < k; i++) {\r\n        buckets[i].sort(function (a, b) { return a - b; }); \r\n        console.log('Bucket of'+i+' '+buckets[i]);\r\n        console.log('Bucket of'+i+' length '+buckets[i].length);\r\n    }\r\n\r\n\r\n    let index = 0;\r\n    for (let i = 0; i < n; i++) {\r\n        //console.log('Iterations: ' + i);\r\n        for (let j = 0; j < buckets[i].length; j++) {\r\n            animations.push([\"comparision1\", index]);\r\n            animations.push([\"comparision2\", index]);\r\n            animations.push([\"overwrite\", index, buckets[i][j]]);\r\n            arr[index] = buckets[i][j];\r\n            //console.log('Arr['+index+']' + arr[index]);\r\n            index++;\r\n        }\r\n    }\r\n    //console.log(arr);\r\n}\r\n\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","export function getCountingSortAnimations(array){\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    countingSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction countingSort(a, animations){\r\n    let count=[];\r\n    const k = 650;\r\n    const n=a.length;\r\n    for(let i=0; i<k; i++)\r\n        count[i]=0;\r\n    for(let i=0; i<n; i++){\r\n        count[a[i]]++;\r\n    }\r\n\r\n    let index=0;\r\n    for(let i=0; i<k; i++){\r\n        for(let j=0; j<count[i]; j++){\r\n            animations.push([\"comparision1\", index]);\r\n            animations.push([\"comparision2\", index]);\r\n            animations.push([\"overwrite\", index, i]);\r\n            a[index]=i;\r\n            index++;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/*Logic\r\n\r\nvoid countingSort(int a[], int n, int k){\r\n    int count[k];\r\n    for(int i=0; i<k; i++)\r\n        count[i]=0;\r\n    for(int i=0; i<n; i++){\r\n        count[a[i]]++;\r\n    }\r\n\r\n    int index=0;\r\n    for(int i=0; i<k; i++){\r\n        for(int j=0; j<count[i]; j++){\r\n            a[index]=i;\r\n            index++;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n*/\r\n","import './App.css';\nimport React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}